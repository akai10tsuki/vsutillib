#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
run command line generated by mkvmerge-gui

use the linux bash one encased in double quotes
"""

import argparse
import sys

from vsutillib import config
from vsutillib.mkv import MKVCommandParser, VerifyStructure
from vsutillib.process import RunCommand


VERSION = config.SCRIPTS_VERSION

__version__ = VERSION


def mkvrun():
    """
    Run mkvmerge-gui generated cli command and
    applied to all files in directory. The command
    select has to be for bash shell and encase in
    double quotes

    ::

        usage: mkvRun.py [-h] [--version] command

        mkvmerge-gui generated command line batch run utility

        positional arguments:
        command     mkvmerge-gui "command" line - used Linux/Unix shell enclose it
                    in double quotes

        optional arguments:
        -h, --help  show this help message and exit
        --version   show program's version number and exit

    Args:
        command (str): bash command line as generated
            by mkvmerge-gui
    """

    parser = argparse.ArgumentParser(
        description="mkvmerge-gui generated command line batch run utility"
    )
    parser.add_argument(
        "command",
        help='mkvmerge-gui "command" line - used Linux/Unix shell enclose it in double quotes',
    )
    parser.add_argument("--version", action="version", version="%(prog)s " + VERSION)

    args = parser.parse_args()

    if args.command:
        print("command read: [{}]".format(args.command))

    f = open("log.txt", mode="w", encoding="utf-8")

    mkv = MKVCommandParser()
    mkv.command = args.command

    verify = VerifyStructure()

    cli = RunCommand(
        processLine=displayConsoleOutput,
        commandShlex=True,
        universalNewLines=True
    )

    if mkv:
        for cmd, baseFiles, sourceFiles, destinationFiles, _, _, _ in mkv:

            verify.verifyStructure(baseFiles, sourceFiles)

            if verify:
                msg = ( f"\nCommand: {cmd}\nBase Files: {baseFiles}\n"
                       f"Source Files: {sourceFiles}\n"
                       f"Destination Files: {destinationFiles}\n\n"
                )

                print(msg)
                f.write(msg)

                cli.command = cmd
                cli.run()

                for l in cli.output:
                    f.write(str(l))

            else:
                msg = f"\nDestination Files: {destinationFiles}\n"
                f.write(msg)
                for m in verify.analysis:
                    print(m)
                    f.write(m)

    else:

        print("Bummer...{}".format(mkv.error))


def displayConsoleOutput(line):
    """
    Convenience function that interprets lines in a stream of characters.

    Args:
        line (str): character line to display
    """

    tmpLine = line

    if line[0:9] == "Progress:":
        lastChar = line[-1]
        if lastChar == "\n":
            tmpLine = line[0:-1] + "\r"

    sys.stdout.write(tmpLine)
    sys.stdout.flush()

    return


if __name__ == "__main__":
    mkvrun()
