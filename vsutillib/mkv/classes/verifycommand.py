"""
verify mkvmerge-gui for consistency
no errors should be found ever
except for wrong copy/paste
manual entry or edits after paste

MKVCommand will find the real errors
  number of source files not matching
"""


import ast
import re

from pathlib import Path


from ..mkvutils import numberOfTracksInCommand, stripEncaseQuotes

class VerifyMKVCommand():
    """
    Sanity check on command any failure results in no action whatsoever
    and since the original are not modified the resulting command should be safe

    :param strCommand: command line as generated by mkvtoolnix-gui
    :type strCommand: str
    :param lstResults: list to put analysis messages
    :type lstResults: list
    :rtype: bool
    """

    __log = False

    @classmethod
    def classLog(cls, setLogging=None):
        """
        get/set logging at class level
        every class instance will log
        unless overwritten
        """

        if setLogging is None:
            return cls.__log
        elif isinstance(setLogging, bool):
            cls.__log = setLogging

    def __init__(self, strCommand=None):

        self.__lstAnalysis = None
        self.__errorFound = False
        self.__strCommand = None

        if strCommand is not None:
            self.__strCommand = strCommand
            self.__analyse()

    def __reset(self):

        self.__lstAnalysis = None
        self.__errorFound = False
        self.__strCommand = None


    def __bool__(self):
        return not self.__errorFound

    def __analyse(self):

        strCommand = _convertToBashStyle(self.__strCommand)  # Comvert line to bash style

        self.__lstAnalysis = []

        rg = r"^(.*?)\s\-\-.*?\-\-output.(.*?)\s\-\-.*?\s'\('\s(.*?)\s'\)'.*?\-\-track-order\s(.*)"

        regCommandEx = re.compile(rg)
        matchCommand = regCommandEx.match(strCommand)

        reExecutableEx = re.compile(r"^(.*?)\s\-\-")
        matchExecutable = reExecutableEx.match(strCommand)

        reOutputFileEx = re.compile(r".*?\-\-output\s(.*?)\s\-\-")
        matchOutputFile = reOutputFileEx.match(strCommand)

        reSourcesEx = re.compile(r"'\('\s(.*?)\s'\)'")
        matchSources = reSourcesEx.finditer(strCommand)

        reAttachmentsEx = re.compile(r"\-\-attach-file.(.*?)\s\-\-")
        matchAttachments = reAttachmentsEx.finditer(strCommand)

        bOk = True
        trackOrder = None

        # To look Ok must match the 5 group in the command line that
        # are expected
        # 1: mkvmerge name with fullpath
        # 2: output file
        # 3: at list one source
        # 4: track order
        if matchCommand and (len(matchCommand.groups()) == 4):
            self.__lstAnalysis.append("chk: Command seems ok.")
            trackOrder = matchCommand.group(4)
        else:
            self.__lstAnalysis.append("err: Command bad format.")
            bOk = False

        if trackOrder is not None:
            try:
                d = ast.literal_eval("{" + trackOrder + "}")
                trackTotal = numberOfTracksInCommand(strCommand)

                s = trackOrder.split(',')
                if trackTotal == len(s):
                    for e in s:
                        if not e.find(':') > 0:
                            bOk = False
                else:
                    bOk = False

                if not bOk:
                    self.__lstAnalysis.append(
                        "err: Number of tracks {} and track order of {} don't match.".format(
                            trackTotal,
                            len(d)
                        )
                    )

            except SyntaxError:
                self.__lstAnalysis.append("err: Command track order bad format.")
                bOk = False

        if matchExecutable:
            f = stripEncaseQuotes(matchExecutable.group(1))
            p = Path(f)
            if not p.is_file():
                self.__lstAnalysis.append(
                    "err: mkvmerge not found - {}.".format(str(p))
                )
                bOk = False
            else:
                self.__lstAnalysis.append(
                    "chk: mkvmerge ok - {}".format(str(p))
                )
        else:
            self.__lstAnalysis.append("err: mkvmerge not found.")
            bOk = False

        if matchOutputFile:

            f = stripEncaseQuotes(matchOutputFile.group(1))
            f = f.replace(r"'\''", "'")
            p = Path(f)

            if not Path(p.parent).is_dir():
                self.__lstAnalysis.append(
                    "err: Destination directory not found - {}.".format(str(p.parent))
                )
                bOk = False
            else:
                self.__lstAnalysis.append(
                    "chk: Destination directory ok = {}".format(str(p.parent))
                )

        else:
            self.__lstAnalysis.append("err: Destination directory not found.")
            bOk = False

        if matchSources:
            n = 1

            for match in matchSources:

                f = stripEncaseQuotes(match.group(1))
                f = f.replace(r"'\''", "'")
                p = Path(f)

                if not Path(p.parent).is_dir():
                    self.__lstAnalysis.append(
                        "err: Source directory {} not found {}".format(n, str(p.parent))
                    )
                    bOk = False
                else:
                    self.__lstAnalysis.append(
                        "chk: Source directory {} ok = {}".format(n, str(p.parent))
                    )

                if not Path(p).is_file():
                    self.__lstAnalysis.append(
                        "err: Source file {} not found {}".format(n, str(p))
                    )
                    bOk = False
                else:
                    self.__lstAnalysis.append(
                        "chk: Source file {} ok = {}".format(n, str(p))
                    )

                n += 1

            if n == 1:
                # if the command is so bad matchSources for loop won't run
                self.__lstAnalysis.append("err: Source directory not found.")
                bOk = False
        else:
            self.__lstAnalysis.append("err: Source directory not found.")
            bOk = False

        # This check if for optional attachments files
        n = 1
        for match in matchAttachments:
            f = stripEncaseQuotes(match.group(1))
            f = f.replace(r"'\''", "'")
            p = Path(p)
            if not p.is_file():
                self.__lstAnalysis.append(
                    "err: Attachment {} not found - {}".format(n, str(p))
                )
                bOk = False
            else:
                self.__lstAnalysis.append(
                    "chk: Attachment {} ok = {}".format(n, str(p))
                )
            n += 1

        self.__errorFound = not bOk

    @property
    def log(self):
        """
        return log enable/disable
        instance variable self.__log
        overrides global variable
        """
        if self.__log is not None:
            return self.__log

        return VerifyMKVCommand.classLog()

    @log.setter
    def log(self, value):
        """set instance log variable"""
        if isinstance(value, bool) or value is None:
            self.__log = value

    @property
    def analysis(self):
        """analisis"""
        return self.__lstAnalysis

    @property
    def command(self):
        """command"""
        return self.__strCommand

    @command.setter
    def command(self, value):
        if isinstance(value, str):
            self.__reset()
            self.__strCommand = value
            self.__analyse()

def _convertToBashStyle(strCommand):
    """
    Strip escape windows chars for the command line
    in the end they won't be used in a shell
    the resulting command is bash/zh like
    """

    strTmp = strCommand

    if strTmp.find(r'^"^(^"') >= 0:
        # This is for cmd in Windows
        strTmp = strTmp.replace("'", r"'\''").replace('^', '').replace('/', '\\').replace('"', "'")

    return strTmp
